import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz_data;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  final Set<String> _sentNotifications = {};
  
  final Set<String> _permanentNotifications = {};
  
  static const String _notificationHistoryKey = 'sent_notifications_history_v3';
  static const String _permanentNotificationHistoryKey = 'permanent_notification_history_v1';
  
  bool _historyLoaded = false;
  bool _permanentHistoryLoaded = false;

  bool containsPermanentNotification(String key) {
    return _permanentNotifications.contains(key);
  }

  Future<void> addPermanentNotification(String key) async {
    _permanentNotifications.add(key);
    await _savePermanentNotificationHistory();
  }

  Future<void> init() async {
    await _flutterLocalNotificationsPlugin.cancelAll();
    
    await _loadNotificationHistory();
    await _loadPermanentNotificationHistory();
    
    tz_data.initializeTimeZones();

    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        print('üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏ï‡∏∞: ${response.payload}');
      },
    );
    
    print('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏Å‡∏ï‡∏¥ ${_sentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£ ${_permanentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
  }
  
  Future<void> _loadPermanentNotificationHistory() async {
    if (_permanentHistoryLoaded) {
      print('‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? historyJson = prefs.getString(_permanentNotificationHistoryKey);
      
      if (historyJson != null && historyJson.isNotEmpty) {
        try {
          final List<dynamic> historyList = jsonDecode(historyJson);
          _permanentNotifications.clear();
          _permanentNotifications.addAll(historyList.cast<String>());
          print('üìö ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£: ${_permanentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
        } catch (e) {
          print('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£: $e');
          _permanentNotifications.clear();
          await prefs.remove(_permanentNotificationHistoryKey);
        }
      } else {
        print('üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà');
        _permanentNotifications.clear();
      }
      
      _permanentHistoryLoaded = true;
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£: $e');
    }
  }
  
  Future<void> _savePermanentNotificationHistory() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String historyJson = jsonEncode(_permanentNotifications.toList());
      await prefs.setString(_permanentNotificationHistoryKey, historyJson);
      print('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£: ${_permanentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£: $e');
    }
  }
  
  Future<void> _loadNotificationHistory() async {
    if (_historyLoaded) {
      print('‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    
    try {
      final prefs = await SharedPreferences.getInstance();
      
      
      final String? historyJson = prefs.getString(_notificationHistoryKey);
      
      if (historyJson != null && historyJson.isNotEmpty) {
        try {
          final List<dynamic> historyList = jsonDecode(historyJson);
          _sentNotifications.clear();
          _sentNotifications.addAll(historyList.cast<String>());
          print('üìö ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${_sentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
        } catch (e) {
          print('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON: $e');
          _sentNotifications.clear();
          await prefs.remove(_notificationHistoryKey);
        }
      } else {
        print('üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà');
        _sentNotifications.clear();
      }
      
      _historyLoaded = true;
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: $e');
    }
  }
  
  Future<void> _saveNotificationHistory() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String historyJson = jsonEncode(_sentNotifications.toList());
      await prefs.setString(_notificationHistoryKey, historyJson);
      print('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${_sentNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: $e');
    }
  }

  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledTime,
    String? payload,
  }) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'queue_notification_channel',
      'Queue Notifications',
      channelDescription: 'Notifications for queue status',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
    );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await cancelNotification(id);

    await _flutterLocalNotificationsPlugin.zonedSchedule(
      id,
      title,
      body,
      tz.TZDateTime.from(scheduledTime, tz.local),
      platformChannelSpecifics,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: payload,
    );
    
    String notificationKey = 'scheduled:$id:${scheduledTime.millisecondsSinceEpoch}';
    _sentNotifications.add(notificationKey);
    _permanentNotifications.add('permanent:$id');
    
    await _saveNotificationHistory();
    await _savePermanentNotificationHistory();
    
    print('‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ID $id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ${scheduledTime.toString()}');
  }

  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'queue_notification_channel',
      'Queue Notifications',
      channelDescription: 'Notifications for queue status',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
    );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await cancelNotification(id);

    await _flutterLocalNotificationsPlugin.show(
      id,
      title,
      body,
      platformChannelSpecifics,
      payload: payload,
    );
    
    print('üîî ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ID: $id');
  }

  Future<void> notifyQueueProgress({
    required String restaurantId,
    required String restaurantName,
    required String queueCode,
    required int waitingCount,
  }) async {
    if (!_historyLoaded) {
      await _loadNotificationHistory();
    }
    if (!_permanentHistoryLoaded) {
      await _loadPermanentNotificationHistory();
    }
    
    final String permanentKey = '$restaurantId:$queueCode:$waitingCount';
    
    if (_permanentNotifications.contains(permanentKey)) {
      print('üîï ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô $permanentKey (‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£)');
      return;
    }
    
    final String today = DateTime.now().toString().split(' ')[0]; 
    
    String notificationKey = '$today:$restaurantId:$queueCode:$waitingCount';
    
    if (_sentNotifications.contains(notificationKey)) {
      print('üîï ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô $notificationKey (‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß)');
      return;
    }
    
    await clearQueueNotificationHistory(restaurantId, queueCode);
    
    final int baseId = queueCode.hashCode;
    
    String notificationBody;
    int notificationId;
    
    if (waitingCount == 0) {
      notificationBody = "‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 100; 
    } else if (waitingCount == 1) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 1 ‡∏Ñ‡∏¥‡∏ß‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 1;
    } else if (waitingCount == 2) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 2 ‡∏Ñ‡∏¥‡∏ß‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 2;
    } else if (waitingCount == 3) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 3 ‡∏Ñ‡∏¥‡∏ß‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 3;
    } else if (waitingCount == 4) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 4 ‡∏Ñ‡∏¥‡∏ß‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 4;
    } else if (waitingCount == 5) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 5 ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!";
      notificationId = baseId + 5;
    } else if (waitingCount == 10) {
      notificationBody = "‡∏≠‡∏µ‡∏Å 10 ‡∏Ñ‡∏¥‡∏ß‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!";
      notificationId = baseId + 10;
    } else {
      return;
    }
    
    print('üîî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô $notificationKey');
    
    await cancelNotification(notificationId);
    
    await showNotification(
      id: notificationId,
      title: '‡∏Ñ‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô $restaurantName',
      body: notificationBody,
      payload: 'waiting:$restaurantId:$queueCode:$waitingCount',
    );
    
    _sentNotifications.add(notificationKey);
    _permanentNotifications.add(permanentKey);
    
    await _saveNotificationHistory();
    await _savePermanentNotificationHistory();
    
    print('‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß');
  }

  Future<void> clearQueueNotificationHistory(String restaurantId, String queueCode) async {
    int countBefore = _sentNotifications.length;
    
    _sentNotifications.removeWhere((key) => 
      key.contains(':$restaurantId:$queueCode:'));
    
    if (countBefore != _sentNotifications.length) {
      await _saveNotificationHistory();
      
      int countAfter = _sentNotifications.length;
      print('üßπ ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß $queueCode ‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏ö‡πÑ‡∏õ ${countBefore - countAfter} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)');
    }
  }
  
  Future<void> clearQueuePermanentNotificationHistory(String restaurantId, String queueCode) async {
    int countBefore = _permanentNotifications.length;
    
    _permanentNotifications.removeWhere((key) => 
      key.contains('$restaurantId:$queueCode:'));
    
    if (countBefore != _permanentNotifications.length) {
      await _savePermanentNotificationHistory();
      
      int countAfter = _permanentNotifications.length;
      print('üßπ ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏≤‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß $queueCode ‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏ö‡πÑ‡∏õ ${countBefore - countAfter} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)');
    }
  }

  Future<void> cancelNotification(int id) async {
    try {
      await _flutterLocalNotificationsPlugin.cancel(id);
    } catch (e) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ID $id: $e');
    }
  }

  Future<void> cancelAllNotifications() async {
    try {
      await _flutterLocalNotificationsPlugin.cancelAll();
      _sentNotifications.clear();
      await _saveNotificationHistory();
      print('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $e');
    }
  }

  Future<void> scheduleQueueAdvanceNotifications({
    required String restaurantId,
    required String restaurantName,
    required DateTime bookingTime,
    required String queueCode,
  }) async {
    if (!_historyLoaded) {
      await _loadNotificationHistory();
    }
    if (!_permanentHistoryLoaded) {
      await _loadPermanentNotificationHistory();
    }
    
    String permanentBookingKey = '$restaurantId:$queueCode:booking';
    
    if (_permanentNotifications.contains(permanentBookingKey)) {
      print('üîï ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á $permanentBookingKey (‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£)');
      return;
    }
    
    final String bookingDate = bookingTime.toString().split(' ')[0]; 
    
    String bookingKey = '$bookingDate:$restaurantId:$queueCode:booking';
    
    if (_sentNotifications.contains(bookingKey)) {
      print('üîï ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á $bookingKey (‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß)');
      return;
    }
    
    await cancelQueueNotifications(queueCode);
    
    final int baseId = queueCode.hashCode;
    
    final DateTime thirtyMinBefore = bookingTime.subtract(const Duration(minutes: 30));
    if (thirtyMinBefore.isAfter(DateTime.now())) {
      await scheduleNotification(
        id: baseId,
        title: '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô $restaurantName',
        body: '‡∏≠‡∏µ‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß!',
        scheduledTime: thirtyMinBefore,
        payload: 'queue:$restaurantId:$queueCode',
      );
    }

    final DateTime fifteenMinBefore = bookingTime.subtract(const Duration(minutes: 15));
    if (fifteenMinBefore.isAfter(DateTime.now())) {
      await scheduleNotification(
        id: baseId + 1,
        title: '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô $restaurantName',
        body: '‡∏≠‡∏µ‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß',
        scheduledTime: fifteenMinBefore,
        payload: 'queue:$restaurantId:$queueCode',
      );
    }
    
    if (bookingTime.isAfter(DateTime.now())) {
      await scheduleNotification(
        id: baseId + 2,
        title: '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô $restaurantName',
        body: '‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!',
        scheduledTime: bookingTime,
        payload: 'queue:$restaurantId:$queueCode:exact',
      );
    }
    
    _sentNotifications.add(bookingKey);
    _permanentNotifications.add(permanentBookingKey);
    
    await _saveNotificationHistory();
    await _savePermanentNotificationHistory();
    
    print('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $bookingKey');
  }

  Future<void> cancelQueueNotifications(String queueCode) async {
    final int baseId = queueCode.hashCode;
    
    await cancelNotification(baseId);     
    await cancelNotification(baseId + 1); 
    await cancelNotification(baseId + 2); 
    
    for (int i = 1; i <= 10; i++) {
      await cancelNotification(baseId + i);
    }
    await cancelNotification(baseId + 100); 
    
    _permanentNotifications.removeWhere((key) => key.contains(':$queueCode:'));
    await _savePermanentNotificationHistory();
    
    print('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß $queueCode ‡πÅ‡∏•‡πâ‡∏ß');
  }
  
  
  List<String> getAllNotificationHistory() {
    return _sentNotifications.toList();
  }
  
  
  List<String> getAllPermanentNotificationHistory() {
    return _permanentNotifications.toList();
  }
  
  Future<void> clearAllNotificationHistory() async {
    _sentNotifications.clear();
    await _saveNotificationHistory();
    print('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }
  
  Future<void> resetAll() async {
    await _flutterLocalNotificationsPlugin.cancelAll();
    
    _sentNotifications.clear();
    _permanentNotifications.clear();
    _historyLoaded = false;
    _permanentHistoryLoaded = false;
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_notificationHistoryKey);
    await prefs.remove(_permanentNotificationHistoryKey);
    
    print('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }
}